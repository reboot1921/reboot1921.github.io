{"posts":[{"title":"从头搭建我的博客网站","text":"不断的摄入也需要输出，才能看到相对成本，便于更好进步，搭建一个博客更好的输出。 1、选择静态博客模板框架因为我没有太多的功能需求，目前选择使用静态博客框架，目前市面上框架也很多，比较主流的如：Jekyll（Ruby语言） Octopress（基于Jekyll） Hexo（Node语言） Hugo（GO语言）等，详细信息大家可以搜索引擎，本文选择Hexo来搭建博客网站。 2、安装本地开发环境 安装Node.js 地址：https://nodejs.org/zh-cn/ 默认会安装NPM包管理器 查看Node版本和npm版本：node -v/npm -v 安装最新版本就行 3、安装Hexo12345678npm install -g cnpm --registry=https://registry.npm.taobao.org 全局安装cnpmcnpm install -g hexo-cli 安装Hexo框架生成器mkdir blog 创建博客目录cd blog 进入目录hexo init 初始化博客生成器hexo s/hexo server 启动本地博客hexo n &quot;新建博客&quot; 新建博客文件hexo g 打包成静态文件，默认在public目录下 4、添加主题全局配置将以下配置添加至博客根目录下的_config.yml文件最后 123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: false raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 5、接入评论功能Hexo默认支持的评论接口在themes/yilia/_config.yml配置文件中，多说、网易云跟帖、畅言、Disqus、Gitment，本文使用的是畅言接入。 6、上传静态文件到云服务器如果有云服务器（腾讯云，阿里云，百度云，京东云等）将静态博客文件上传到指定目录，使用nginx代理静态文件，就大功告成啦！ 7、个性化修改 所有的个性化主题配置基本都在themes/yilia/_config.yml下，大家可以自行摸索，具体可以参考：https://github.com/litten/hexo-theme-yilia 去除畅言评论发表下方的广告：themes/yilia/layout/_partial/post/changyan.ejs文件结尾添加： 123456&lt;style&gt; .section-service-w { margin-top: -250px !important; transform: scale(0) !important; }&lt;/style&gt; 最终效果如下： 截取文章部分内容作为摘要添加&lt;!-- more --&gt;至需要截取的Markdown文章相应的位置即可 分页设置如果当前博客数小于每页大小是不会展示分页组件的，分页配置通过Hexo配置文件进行设置","link":"/2021/05/12/%E5%8D%9A%E5%AE%A2/%E4%BB%8E%E5%A4%B4%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"},{"title":"IDEA插件之HTTP接口快速检索【RestfulTool】","text":"MAC系统推荐快捷键【定制：⌥ + ⌘ + N】 介绍一套 Restful 服务开发辅助工具集： 提供了一个 Services Tree 的显示窗口； 点击 URL 直接跳转到对应的方法定义； 一个简单的 Http 请求工具； 支持 Spring 体系 (Spring MVC / Spring Boot)； 支持 Navigate -&gt; Request Service 搜索 Mapping； 使用效果 Services Tree显示显示系统中所有的HTTP接口列表，点击接口可以跳转到接口定义。 URL快速检索跳转可以使用快捷键快速调出检索窗口，输入关键字进行模糊匹配，当项目是多模块多工程同时存在时，可以方便快捷区分定位接口。 HTTP工具一个简单的HTTP调用工具，因为太过简陋一般情况下用不着，不过可以用起来的一点是当选择对应接口时能快速生成对应请求参数，如下图。 配置一般不需要进行配置，使用默认配置即可。 总结总体来说这块插件是比较轻量级的，对我来说最大的用途就是能快速检索定位HTTP接口，大家如果有更好用的插件可以分享出来哈。","link":"/2023/03/27/IDEA/IDEA%E6%8F%92%E4%BB%B6%E4%B9%8BHTTP%E6%8E%A5%E5%8F%A3%E5%BF%AB%E9%80%9F%E6%A3%80%E7%B4%A2%E3%80%90RestfulTool%E3%80%91/"},{"title":"IDEA插件之依赖快捷搜索【Maven Search】","text":"MAC系统推荐快捷键【默认：Shift + CMD + M】 介绍快速查找maven依赖，定制模糊查找算法。支持查找全网类。注：该功能需要连接网络。所有数据来源于源码阅读网。 使用 搜索 复制 基于目标类搜索基于目标类搜索依赖包，定制化选取依赖包，可能会发现更多有意思的组件哦。 使用感想一般企业大部分依赖都是比较固定的，在开发过程中可能需要个别依赖包，使用此插件查看还是比较方便的，同时查看某个包当前最新的版本也是一种快捷方式，往往一个小工具能大大提升开发体验，后续好插件继续分享。","link":"/2023/01/31/IDEA/IDEA%E6%8F%92%E4%BB%B6%E4%B9%8B%E4%BE%9D%E8%B5%96%E5%BF%AB%E6%8D%B7%E6%90%9C%E7%B4%A2%E3%80%90Maven%20Search%E3%80%91/"},{"title":"IDEA插件之好看的暗黑主题【GitHub Theme】","text":"介绍尽可能恢复GitHub主题，保持颜色易于区分，对比度适当，令人愉快的视觉享受。适用了多款主题插件的暗黑主题，最终还是使用本插件的主题，看着确实比较享受，在IDEA的新UI中的Dark主题也是这种配色。 配置配置比较简单，和IDEA主题配置融合。 效果 原装暗黑主题 插件暗黑主题文章效果可能不太明显，下载插件应用后效果还是比较明显。","link":"/2023/01/24/IDEA/IDEA%E6%8F%92%E4%BB%B6%E4%B9%8B%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%9A%97%E9%BB%91%E4%B8%BB%E9%A2%98%E3%80%90GitHub%20Theme%E3%80%91/"},{"title":"IDEA插件之彩虹括号【Rainbow Brackets】","text":"收费版本：Rainbow Brackets免费版本：Rainbow Brackets Lite 介绍一款可以将 (圆括号) [方括号] {花括号} &lt;尖括号&gt; 用不同颜色标记出来, 方便使用者快速识别代码层次, 提高开发效率！支持的语言：Java、Scala、Clojure、Kotlin、Python、Haskell、Agda、Rust、JavaScript、TypeScript、Erlang、Go、Groovy、Ruby、Elixir、ObjectiveC、PHP、HTML、XML、SQL、Apex语言、c#、Dart、Pug/Jade、Bash、Vue.js、c# Razor Pages、GLSL(OpenGL材质语言)、Go模板、c++、C… 使用 括号高亮上图能看到文件所有括号都添加了颜色，临近的括号颜色各不相同。 高亮选中代码块MAC快捷键【⌘ + 鼠标右键】途中绿色和紫色部分展示效果，能够更加清晰的看到当前范围。 暗淡未选中代码块MAC快捷键【⌥ + 鼠标右键】选中部分原样展示，未选中部分暗淡灰色展示，到这里大家脑海里已经有了使用场景了吧。 配置 配置比较简单大家自行使用体验哈！ 使用感想在上边的例子中可能括号层级比较少，没有太大的触感，在工作中往往会出现层层嵌套的括号，快速定位括号位置，在无形中提高了开发效率，我是在第一次使用后就再也丢不掉了。","link":"/2023/02/10/IDEA/IDEA%E6%8F%92%E4%BB%B6%E4%B9%8B%E5%BD%A9%E8%99%B9%E6%8B%AC%E5%8F%B7%E3%80%90Rainbow%20Brackets%E3%80%91/"},{"title":"IDEA插件之注释快捷展示【Show Comment】","text":"介绍 在结构树显示 文档注释； 在行末尾显示 文档注释； 输入 doc / docc 等生成 /** */； json 字段注释从 xxx.json.tsv 读取； json 字典注释从 键名.tsv 读取； 支持 “xx-类全名或简名.json” 文档注释与跳转到字段； 支持 从配置文件获取外部注释用于文件夹、资源、COBOL 等； 修改配置：设置 -&gt; 工具 -&gt; // Show Comment Global/Project； 使用自动显示注释，在阅读源码时比较实用，能迅速了解代码表达的意思，当然排除注释不真实的情况哈，这里列举几个实例。 结构树显示注释 行末尾显示注释 配置 Show Comment Global可针对注释的展现形式进行全局配置，如文本颜色、显示行数、前缀等。 Show Comment Project也可对项目注释是否展示进行配置，配置包含正则和排除正则表达式。 使用感想在对项目不太熟悉的情况下，对于快速了解项目，梳理业务逻辑，此插件还是比较实用的，提升工程熟悉进度。","link":"/2023/01/31/IDEA/IDEA%E6%8F%92%E4%BB%B6%E4%B9%8B%E6%B3%A8%E9%87%8A%E5%BF%AB%E6%8D%B7%E5%B1%95%E7%A4%BA%E3%80%90Show%20Comment%E3%80%91/"},{"title":"IDEA插件之自动化生成注释【Easy Javadoc】","text":"MAC系统推荐快捷键【CMD + \\】 介绍能帮助开发者快速生成类、方法、属性等中文的javadoc/kdoc，此插件能快速生成注释，大多内容是没问题的，但是也会出现生成中文注释不符合预期的情况，需要人工进行修正，总体来看人工修正工作量比较小。 使用直接使用快捷键生成对应的注释。 类 方法 属性 配置生成内容存在不符合预期的情况，可定制化进行配置，使生成注释更加准确。插件包含Javadoc和Kdoc配置，以下以Javadoc为例。 Class Template Method Template Field Template","link":"/2023/01/24/IDEA/IDEA%E6%8F%92%E4%BB%B6%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8C%96%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A%E3%80%90Easy%20Javadoc%E3%80%91/"},{"title":"IDEA插件之输入法自动切换【Smart Input Source】","text":"MAC系统推荐快捷键针对输入切换无需快捷键，但是在某些场景下比如Git Diff的时候可能存在自动跳转到源文件的情况，这种时候需要手动关闭自动切换功能，给作者提了个建议对这种场景进行优化。建议使用的快捷键，C代表关闭，O代表打开。 介绍 解决什么问题对于母语为中文的开发者，写代码过程中经常需要在中/英输入法之间进行切换，而且由于不清楚当前处于哪种输入状态，有时输入到一半发现输入法错了，删除后重新输入，严重影响了编码效率。还有在IdeaVim命令模式时必须使用英文输入法，由于不清楚当前处于哪种输入状态，而在IdeaVim命令模式下误用中文输入法，导致效率严重降低。其实，在哪种情况需要使用哪种输入法是可以明确的，既然这样就可以让IDE帮助我们自动切换输入法。 解决方案该插件核心功能可以根据输入位置的上下文智能分析当前处于什么场景应该使用哪种输入法并自动切换，而且还可以通过光标的颜色来提醒当前是什么输入法，关注官方博客了解更多特性。插件能够智能分析出十余种场景，根据不同场景自动切换输入法，详见插件设置页面。 如果识别当前场景为注释，则会自动切换为中文输入法。 如果识别当前场景为IdeaVim命令模式，则会自动切换为英文输入法。 配置无特殊需求使用默认配置即可。 基础配置 Java场景配置 使用 编码区自动切换英文输入 注释区自动切换中文输入 快捷键控制开关使用上文推荐的快捷键控制自动切换，如果不想设置快捷键方式也可以点击菜单功能进行控制如： 使用感想专注编码时自动切换输入法确实省事，把这些重复性的操作交给计算机自动控制，看到这款插件的时候，心里想为啥自己就没想到开发这样一款插件呢，真的是只要有需求就有对应的产品，合理利用工具，进一步解放生产力。","link":"/2023/01/27/IDEA/IDEA%E6%8F%92%E4%BB%B6%E4%B9%8B%E8%BE%93%E5%85%A5%E6%B3%95%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E3%80%90Smart%20Input%20Source%E3%80%91/"},{"title":"IDEA插件之驼峰转换【String Manipulation】","text":"MAC系统推荐快捷键【定制：⌃ + ⌥ + ⌘ + P】 介绍还在为大量需要转换的驼峰格式烦恼吗，有了这款插件，从此驼峰格式不再烦恼，😂 当然这款插件不仅仅能转换驼峰，还包含很多其他格式，如下： Toggle: SCREAMING_SNAKE_CASE / camelCase Toggle: snake_case / camelCase Toggle: kebab-case / snake_case Toggle: kebab-case / camelCase Toggle: dot.case / camelCase Toggle: PascalCase / camelCase Toggle: lowercase words / camelCase Toggle: First word capitalized / camelCase Toggle: Capitalized Words / camelCase To camelCase To snake_case To kebab-case To PascalCase To SCREAMING_SNAKE_CASE To Capitalized_Snake_Case Capitalize To lower case To UPPER CASE 配置可以调整转换格式条目的顺序，在选择格式化时更快匹配目标格式，也可以添加新的Action自定义多个格式化方式。 自定义Action自定义Action，添加快捷键，配置适合自己的格式化操作。 使用 右键调出这里能看到比较多的转换方式，但是根据菜单来转换，展开比较麻烦，效率不高，直接通过快捷键比较直接快速。 快捷键转换⌃ + ⌥ + ⌘ + P 直接使用快捷键爽歪歪。 使用感想在工作中使用频率还是比较高的，特别是从某个地方CV过来的数据，需要批量转换格式的时候，一键完成转换，极大提高效率，小小插件，快乐工作每一天。","link":"/2023/03/23/IDEA/IDEA%E6%8F%92%E4%BB%B6%E4%B9%8B%E9%A9%BC%E5%B3%B0%E8%BD%AC%E6%8D%A2%E3%80%90String%20Manipulation%E3%80%91/"},{"title":"记一次Github仓库被Fork后删除的经历","text":"1.写在前面作为开发者，我们都比较了解Github，有时兴致冲冲的将项目放到Github上维护起来，还期待获得几个star，不经意可能将敏感数据或者文件push到云端，当发现需要删除的时候可能已经来不及了，仓库已经被其他用户fork了，因为fork的仓库我们是没法直接删除的，遇到这种情况不要慌，还是有办法解决的。一般这种情况要么是需要删除某些敏感文件或数据，要么是需要直接删除整个仓库，我们可以从下边几种方式进行处理，希望对有困难的兄弟有所帮助。 2.直接联系用户方式如果能直接联系到仓库拥有着，要求其删除是最便捷的方式了，但能联系上对方也是需要看运气的，毕竟很多 GitHub 用户是水军，在平台上并不活跃，总之试试总是好的，说不定成功了呢。 2.1通过Github用户信息最简单直接的方式就是通过Github用户所留的信息，如包含邮箱、社交渠道等信息，可以直接联系用户，当然大部分用户是不会留真实的信息的。 2.2通过提交代码是配置的邮箱信息用户在提交代码是一般会配置提交者用户名和邮箱号，这个是客户端配置的，一般也不太会是真实的信息，也只能靠运气试试看。 找到一条作者的提交记录 在提交记录的url地址添加后缀.patch 2.3通过向作者的仓库提交issue找到作者活动比较多的自有项目，提交issue告知事项并等待对方答复或联系自己，这种方式只能看作者心情和品行了。 2.4通过作者曾经提交的issue进行回复这种情况和2.3类似，看作者心情。 找到作者最近活动记录 回复相关issue 3.通过官方途径进行维权如果通过以上途径均无法联系到对方，或者短时间内比较着急并未获得对方回复，这种情况下可以通过官方途径进行申诉，由官方强制进行下架处理，这种方式需要申请人填写的资料相对较多，并且是全英文的内容，毕竟Github是面向世界的托管平台，这时候借助翻译软件会省心不少。虽然官方途径比较麻烦，但是官方处理效率还是蛮高的，我这边提交申请后很快得到回复，不到一周整个流程顺利结束。对于Github内容删除政策，可以参考中文版文档，可能不是最新的但是大体内容是一致的：https://docs.github.com/zh/site-policy/content-removal-policies/submitting-content-removal-requests英语过关的同学可以直接上原版链接：https://docs.github.com/en/site-policy/content-removal-policies/submitting-content-removal-requests 3.1私人删除部分内容和文件私人信息删除申请入口：https://support.github.com/contact/private-information 3.2删除整个仓库DMCA下架申请入口：https://support.github.com/contact/dmca-takedown如果有公函或者其他附件证，能明仓库所属和侵权行为，附件内容最好英文翻译并连同原版发送，通过邮件再次提交，建议发送完整内容（问题+附件），邮箱地址：copyright@github.com 4.总结遇到数据泄露或者侵权事情的时候，确实比较心累，来自自身的压力或者其他方面的压力，这个时候需要头脑冷静的处理问题，将处理的流程梳理出来心里会踏实点，寻求他人的帮助也是一种途经，总之能解决问题就是圆满。这里我将自己经历的Github数据泄露处理流程分享出来，希望能帮助到遇到困难的同志们，加油！最后如果是通过官方途径提交申诉的方式，一定要填写的清楚些，描述清楚，不然官方会通过邮件进行确认比较耗费时间。","link":"/2021/05/12/%E7%BB%8F%E9%AA%8C/%E8%AE%B0%E4%B8%80%E6%AC%A1Github%E4%BB%93%E5%BA%93%E8%A2%ABFork%E5%90%8E%E5%88%A0%E9%99%A4%E7%9A%84%E7%BB%8F%E5%8E%86/"},{"title":"博客自动化部署","text":"经过部署自己的静态博客页面，我们已经可以发表文章到博客系统了，但是每次都需要编译、打包文件上传到云服务器，相同的流程能使用工具完成时最好的，接下来就结合git版本管理工具实现自动化部署流程，后续我们的操作就只有上传MD文件博客页面就能自动更新。 1、选择版本管理工具这里我们直接使用码云 ，速度相对较快，大家懂得，直接创建代码仓库将我们的博客代码push到远端，但是需要注意需忽略文件，如果使用idea可以下载.gitignore插件： 12345.idea*.imlnode_modulesoutdb.json 其中out是打包输出路径，可以从项目根目录_config.yml进行调整，db.json需要忽略，避免部署时产生冲突 2、云服务器安装运行环境 git下载 下载安装，或者通过yum进行安装 12345第一种：yum install git第二种：将下载后的二进制文件包解压，设置环境变量，可自行百度下载安装完成后查看版本git -version node下载 根据需要下载对应版本，本文下载Linux 二进制文件 (x64) 123456789解压压缩包tar -xvf node-v14.16.1-linux-x64.tar.xz重命名文件名mv node-v14.16.1-linux-x64 node14创建软连接，设置环境变量ln -s node14/bin/node /usr/bin/node查看版本node -vnpm -v 3、拉取代码并安装Hexo 拉取代码并手动部署 123456789101112拉取远程代码git clone https://gitee.com/代码仓库地址初始化node依赖包 npm install安装cnpmnpm install -g cnpm --registry=https://registry.npm.taobao.org通过cnpm安装hexocnpm install -g hexo-cli创建hexo软链，设置全局环境变量ln -s /export/app/kayla-blog/node_modules/hexo-cli/bin/hexo /usr/bin/hexo编译生成静态文件hexo g 设置用户名密码直接修改项目目录下.git/config，最后添加如下内容 12[credential] helper = store 4、创建自动化脚本如果以上步骤正常接下来就比较简单了，通过linux的cron定时执行脚本任务触发拉取最新博客内容和编译静态文件 创建cron任务 123456查看当前任务列表crontab -l编辑创建任务crontab -e表达式调用，每三分钟执行一次，执行hexo-g.sh结果写入hexo.out，注意：必须添加 2&gt;&amp;1 */3 * * * * /export/app/hexo-g.sh &gt;&gt; /export/app/hexo.out 2&gt;&amp;1 脚本内容hexo-g.sh 1234567891011121314#!/bin/bashsource /etc/profilesource ~/.bashrcecho &quot;开始自动编译，当前时间：$(date &quot;+%Y-%m-%d %H:%M:%S&quot;)&quot;cd /export/app/blogecho &quot;开始拉取gitee代码&quot;git pullecho &quot;代码拉取完成&quot;echo &quot;开始编译生成静态文件-&gt;out&quot;hexo gecho &quot;完成&quot; 测试结果可能部署过程中会遇到一些坑，解决有困难的同学可以放到评论区，大家一起解决，相互交流学习 12345678910111213141516开始自动编译，当前时间：2021-05-04 07:51:01开始拉取gitee代码From https://gitee.com/xxx/blog1ecc028..980f12b master -&gt; origin/masterUpdating 1ecc028..980f12bFast-forward...215\\232\\345\\256\\242\\347\\275\\221\\347\\253\\231.md&quot; | 66 +++++++++++++---------1 file changed, 38 insertions(+), 28 deletions(-)代码拉取完成开始编译生成静态文件-&gt;outINFO Validating configINFO Start processingINFO Files loaded in 270 msINFO Generated: 2021/05/03/从头搭建我的博客网站/index.htmlINFO 1 files generated in 76 ms完成 5、发布博客到各大内容网站自己的博客被更多的人看到并应用才能真正体现它的价值，可以将Markdown格式的博客信息放到 博客园、CSDN、掘金、简书等内容网站。","link":"/2021/05/12/%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"},{"title":"十分钟安装部署大模型ChatGML-6B","text":"近期大模型可谓是如火如荼，按耐不住也想手动安装部署大模型，近距离接触大模型，废话不多说直接开始安装部署。 部署机器准备 可以在某某云申请GPU服务器，模型会跑的更快； 本地电脑配置尚佳也可以用来跑模型，配置不同响应效果略有区别； 安装环境目前绝大多数模型都是使用python语言，这里我们使用conda管理python环境。 安装miniconda可以从这里获取对应版本的安装程序：Latest Miniconda Installer Links，下载完成以后执行命令，这里我已Linux为例。 1bash Miniconda3-latest-Linux-x86_64.sh 按照提示进行安装，完成安装后配置~/.bashrc文件，添加如下一行配置。 1conda_dir=/root/miniconda3 执行如下命令使配置生效，之后你会看到命令行前出现base，代表conda生效。 1source ~/.bashrc 创建虚拟环境使用虚拟环境管理python依赖，防止环境被污染，当然如果仅仅部署一套程序，完全可以使用base环境，甚至可以直接使用基础python环境，习惯使用conda了。 123456# 创建虚拟环境ChatGLM-6Bconda create -n ChatGLM-6B python=3.11# 启用ChatGLM-6B虚拟环境conda activate ChatGLM-6B# 退出虚拟环境conda deactivate 安装Git如果没有git环境需要安装，可以通过git –version进行检查。 123yum install git# 方便下载模型权重yum install git-lfs 下载资源大模型部署涉及的资源基本都是 模型代码+模型权重，ChatGLM-6B开源代码参考 https://github.com/THUDM/ChatGLM-6B，里边安装步骤其实比较详细，这里简单顺下。 下载模型代码1git clone https://github.com/THUDM/ChatGLM-6B.git 下载模型权重模型可以从HF进行下载，这里我下载量化模型int4为例。 1234# 下载模型相关基础小文件git clone https://huggingface.co/THUDM/chatglm-6b-int4# 下载lfs类型文件，包含模型权重文件git lfs pull 可能下载速度过慢，可以直接手动下载后将文件放到目录下即可。 部署模型ChatGLM-6B有多个实例程序，如：web_demo、cli_demo，这里通过web_demo部署页面UI程序，修改根目录下web_demo.py程序。 12345tokenizer = AutoTokenizer.from_pretrained(&quot;THUDM/chatglm-6b&quot;, trust_remote_code=True)model = AutoModel.from_pretrained(&quot;THUDM/chatglm-6b&quot;, trust_remote_code=True).half().cuda()# 添加server_name使外部浏览器能够访问，否则是回环地址demo.queue().launch(share=False, inbrowser=True, server_name='0.0.0.0') 将其中的THUDM/chatglm-6b修改为上方下载模型权重的路径即可，以上代码配置的是有GPU的机器，如果是其他环境可以参考官方文档支持。 运行模型1234# 前台运行程序python web_demo.py# 后台运行，实时显示日志nohup python -u web_demo.py &gt; nohup.out 2&gt;&amp;1 &amp; CPU运行1model = AutoModel.from_pretrained(&quot;THUDM/chatglm-6b&quot;, trust_remote_code=True).float() MAC运行1model = AutoModel.from_pretrained(&quot;your local path&quot;, trust_remote_code=True).half().to('mps') mac运行如果遇到问题可以参考官方文档进行解决，https://github.com/THUDM/ChatGLM-6B#mac-部署 结果速览访问地址：http://127.0.0.1:7860/ 总结我是按量买的云服务，穷人真难，看着充值金额不断下降，心疼啊。本次带来大模型最为基础的部署指南，后续我会持续更新，包括大模型微调、大模型原理等内容，敬请期待哦。","link":"/2023/05/20/%E5%A4%A7%E6%A8%A1%E5%9E%8B/%E5%8D%81%E5%88%86%E9%92%9F%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%A4%A7%E6%A8%A1%E5%9E%8BChatGML-6B/"}],"tags":[{"name":"搭建","slug":"搭建","link":"/tags/%E6%90%AD%E5%BB%BA/"},{"name":"IDEA","slug":"IDEA","link":"/tags/IDEA/"},{"name":"Github","slug":"Github","link":"/tags/Github/"}],"categories":[{"name":"博客","slug":"博客","link":"/categories/%E5%8D%9A%E5%AE%A2/"},{"name":"工具","slug":"工具","link":"/categories/%E5%B7%A5%E5%85%B7/"},{"name":"分享","slug":"分享","link":"/categories/%E5%88%86%E4%BA%AB/"}],"pages":[{"title":"关于我","text":"我是一名在北漂程序员！","link":"/about/index.html"}]}